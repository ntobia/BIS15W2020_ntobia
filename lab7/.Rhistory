geom_point(size=3)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Community Composition"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA % Variable", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Plot of Community Composition", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=3)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance %"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA % Variable", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Plot of Community Composition", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=3)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA % Variable", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=3)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=3)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=3)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=3)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=3)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=4)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=4)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
install.packages(c("shiny", "shinydashboard"))
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- readr::read_csv("data/UC_admit.csv")
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Ethnicity"),
dashboardSidebar(),
dashboardBody(
selectInput("fill", "Select variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
plotOutput("plot", width = "900px", height = "600px")))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Ethnicity", y="FilteredCountFR", fill=input$fill)) +
geom_col(position = "dodge") + theme_light(base_size = 18) +
coord_flip()+
labs(y="Count")
})
session$onSessionEnded(stopApp)}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Ethnicity"),
dashboardSidebar(),
dashboardBody(
selectInput("fill", "Select variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
plotOutput("plot", width = "900px", height = "600px")))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Ethnicity", y="FilteredCountFR", fill=input$fill)) +
geom_col(position = "dodge") + theme_light(base_size = 18) +
labs(y="Count")
})
session$onSessionEnded(stopApp)}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Ethnicity"),
dashboardSidebar(),
dashboardBody(
selectInput("fill", "Select variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
plotOutput("plot", width = "900px", height = "600px")))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Ethnicity", y="FilteredCountFR", fill=input$fill)) +
geom_col(position = "dodge") + theme_light(base_size = 18) +
coord_flip()+
labs(y="Count")
})
session$onSessionEnded(stopApp)}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Academic Year"),
dashboardSidebar(),
dashboardBody(
selectInput("fill", "Select variable", choices = c("Campus", "Category", "Ethnicity"),
selected = "Campus"),
plotOutput("plot", width = "900px", height = "600px")))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y="FilteredCountFR", fill=input$fill)) +
geom_col(position = "dodge") + theme_light(base_size = 18) +
coord_flip() +
labs(y="Count")
})
session$onSessionEnded(stopApp) }
shinyApp(ui, server)
install.packages(c("shiny", "shinydashboard"))
knitr::opts_chunk$set(echo = TRUE)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Ethnicity"),
dashboardSidebar(),
dashboardBody(
selectInput("fill", "Select variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
plotOutput("plot", width = "900px", height = "600px")))
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Ethnicity"),
dashboardSidebar(),
dashboardBody(
selectInput("fill", "Select variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
plotOutput("plot", width = "900px", height = "600px")))
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Ethnicity"),
dashboardSidebar(),
dashboardBody(
selectInput("fill", "Select variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
plotOutput("plot", width = "900px", height = "600px")))
knitr::opts_chunk$set(echo = TRUE)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Ethnicity"),
dashboardSidebar(),
dashboardBody(
selectInput("fill", "Select variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
plotOutput("plot", width = "900px", height = "600px")))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- readr::read_csv("data/UC_admit.csv")
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Ethnicity"),
dashboardSidebar(),
dashboardBody(
selectInput("fill", "Select variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
plotOutput("plot", width = "900px", height = "600px")))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Ethnicity", y="FilteredCountFR", fill=input$fill)) +
geom_col(position = "dodge") + theme_light(base_size = 18) +
coord_flip()+
labs(y="Count")
})
session$onSessionEnded(stopApp)}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Academic Year"),
dashboardSidebar(),
dashboardBody(
selectInput("fill", "Select variable", choices = c("Campus", "Category", "Ethnicity"),
selected = "Campus"),
plotOutput("plot", width = "900px", height = "600px")))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y="FilteredCountFR", fill=input$fill)) +
geom_col(position = "dodge") + theme_light(base_size = 18) +
coord_flip() +
labs(y="Count")
})
session$onSessionEnded(stopApp) }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Ethnicity"),
dashboardSidebar(),
dashboardBody(
selectInput("fill", "Select variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
plotOutput("plot", width = "900px", height = "600px")))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Ethnicity", y="FilteredCountFR", fill=input$fill)) +
geom_col(position = "dodge") + theme_light(base_size = 18) +
coord_flip()+
labs(y="Count")
})
session$onSessionEnded(stopApp)}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Ethnicity"),
dashboardSidebar(),
dashboardBody(
selectInput("fill", "Select variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
plotOutput("plot", width = "900px", height = "600px")))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Ethnicity", y="FilteredCountFR", fill=input$fill)) +
geom_col(position = "dodge") + theme_light(base_size = 18) +
coord_flip()+
labs(y="Count")
})
session$onSessionEnded(stopApp)}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Academic Year"),
dashboardSidebar(),
dashboardBody(
selectInput("fill", "Select variable", choices = c("Campus", "Category", "Ethnicity"),
selected = "Campus"),
plotOutput("plot", width = "900px", height = "600px")))
UC_admit <- readr::read_csv("data/UC_admit.csv")
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Ethnicity"),
dashboardSidebar(),
dashboardBody(
selectInput("fill", "Select variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
plotOutput("plot", width = "900px", height = "600px")))
library(tidyverse)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Ethnicity"),
dashboardSidebar(),
dashboardBody(
selectInput("fill", "Select variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Academic_Yr"),
plotOutput("plot", width = "900px", height = "600px")))
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Ethnicity", y="FilteredCountFR", fill=input$fill)) +
geom_col(position = "dodge") + theme_light(base_size = 18) +
coord_flip()+
labs(y="Count")
})
session$onSessionEnded(stopApp)}
shinyApp(ui, server)
